plugins {
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.184'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

tasks.named('wrapper', Wrapper).configure {
    // Define wrapper values here so as to not have to always do so when updating gradlew.properties.
    // Switching this to Wrapper.DistributionType.ALL will download the full gradle sources that comes with
    // documentation attached on cursor hover of gradle classes and methods. However, this comes with increased
    // file size for Gradle. If you do switch this to ALL, run the Gradle wrapper task twice afterwards.
    // (Verify by checking gradle/wrapper/gradle-wrapper.properties to see if distributionUrl now points to `-all`)
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
    mavenCentral()

    // Paper/Bukkit repositories
    maven {
        name = 'papermc'
        url = 'https://repo.papermc.io/repository/maven-public/'
    }

    // Sonatype repository
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }

    // OpenCollab Snapshots
    maven {
        name = 'OpenCollab Snapshots'
        url = 'https://repo.opencollab.dev/snapshot/'
    }

    // JitPack for GitHub dependencies
    maven {
        name = 'jitpack'
        url = 'https://jitpack.io'
    }

    // Daporkchop repository for PorkLib
    maven {
        name = 'Daporkchop_'
        url = 'https://maven.daporkchop.net/'
    }

    // dmulloy2 repository for ProtocolLib
    maven {
        name = 'dmulloy2-repo'
        url = 'https://repo.dmulloy2.net/repository/public/'
    }
}

base {
    archivesName = mod_id
}

// Mojang ships Java 21 to end users starting in 1.20.5, so mods should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(21)

//minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
//minecraft.accessTransformers.entry public net.minecraft.client.Minecraft textureManager # textureManager

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        argument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        arguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    runtimeClasspath.extendsFrom localRuntime
}

dependencies {
    // NeoForge
    implementation "net.neoforged:neoforge:${neo_version}"

    // Compile-time only dependencies (provided scope in Maven)
    compileOnly 'org.projectlombok:lombok:1.18.38'
    compileOnly 'com.comphenix.protocol:ProtocolLib:5.3.0'

    // Note: Paper API is not needed for NeoForge mods, replaced by NeoForge API above
    // compileOnly 'io.papermc.paper:paper-api:1.21.4-R0.1-SNAPSHOT'

    // Implementation dependencies (compile scope in Maven)
    implementation 'io.papermc:paperlib:1.0.8'
    implementation 'com.google.code.gson:gson:2.13.0'
    implementation 'com.github.BTEUK:terraminusminus:41d3843'
    implementation 'com.google.guava:guava:33.4.8-jre'
    implementation 'org.apache.commons:commons-lang3:3.17.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.3'
    implementation 'io.netty:netty-buffer:4.2.0.Final'
    implementation 'org.jetbrains:annotations:26.0.2'
    implementation 'commons-io:commons-io:2.19.0'
    implementation 'net.daporkchop.lib:common:0.5.7-SNAPSHOT'
    implementation 'lzma:lzma:0.0.1'
}

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

// Shadow jar configuration to replicate Maven shade plugin functionality
shadowJar {
    // Relocate packages to avoid conflicts
    relocate 'com.google.gson', 'de.btegermany.terraplusminus.libs.gson'
    relocate 'com.google.guava', 'de.btegermany.terraplusminus.libs.guava'
    relocate 'org.apache.commons', 'de.btegermany.terraplusminus.libs.commons'
    relocate 'com.fasterxml.jackson', 'de.btegermany.terraplusminus.libs.jackson'
    relocate 'io.netty', 'de.btegermany.terraplusminus.libs.netty'
    relocate 'org.jetbrains.annotations', 'de.btegermany.terraplusminus.libs.annotations'
    relocate 'net.daporkchop.lib', 'de.btegermany.terraplusminus.libs.porklib'

    // Exclude provided dependencies from shadow jar
    dependencies {
        exclude(dependency('org.projectlombok:lombok'))
        exclude(dependency('com.comphenix.protocol:ProtocolLib'))
    }

    archiveClassifier = ''

    // Ensure shadow jar is built as part of the build process
    build.dependsOn shadowJar
}
